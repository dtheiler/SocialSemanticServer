//  public boolean isSharedNootebook(SSUri notebookUri, SSLabel userName, Notebook notebook) {
//    return uriHelper.isSharedNotebookUri(userName, notebook, notebookUri);
//  }

//  public String getUserEmail(final SSEvernoteInfo evernoteInfo) throws SSErr{
//    return evernoteInfo.userStore.getUser().getEmail();
//  }

//  private static SSLabel getLinkedNoteLabel(
//    final Note  note) throws SSErr {
//
//    try{
//      final SSLabel tmpLabel = SSLabel.get(note.getTitle());
//
//      if(tmpLabel == null){
//        return getDefaultLabel();
//      }else{
//        return tmpLabel;
//      }
//    }catch(Exception error){
//      return getDefaultLabel();
//    }
//  }

//private static SSUri getLinkedNoteUri(LinkedNotebook linkedNotebook, Note note) throws SSErr{
//    return SSUri.get(linkedNotebook.getWebApiUrlPrefix() + "share/view/" + linkedNotebook.getShareKey() + "?#n=" + note.getGuid());
//  }
//
//  private static boolean isSharedNotebookUri(SSLabel userName, Notebook notebook, SSUri notebookUri){
//
//    String sharedNotebookUriStr;
//
//    try{
//      sharedNotebookUriStr = createSharedNotebookUriStr(userName, notebook);
//    }catch(Exception error){
//      return false;
//    }
//
//    if(
//      notebookUri == null ||
//      SSStrU.isEmpty(notebookUri.toString())){
//      return false;
//    }
//
//    return notebookUri.toString().equals(sharedNotebookUriStr);
//  }

//    @Override
//  public List<LinkedNotebook> evernoteNotebooksLinkedGet(SSServPar parA) throws SSErr{
//
//    try{
//      SSEvernoteNotebooksLinkedGetPar par             = new SSEvernoteNotebooksLinkedGetPar(parA);
//
//			return par.noteStore.listLinkedNotebooks();
//    }catch (Exception error){
//			SSServErrReg.regErrThrow(error);
//      return null;
//		}
//  }
  
  //  @Override
//  public List<Notebook> evernoteNotebooksGet(SSServPar parA) throws SSErr {
//
//    try{
//
//      SSEvernoteNotebooksGetPar par       = new SSEvernoteNotebooksGetPar(parA);
//
//      return par.noteStore.listNotebooks();
//    }catch (Exception error){
//      SSServErrReg.regErrThrow(error);
//      return null;
//    }
//  }
  
//  @Override
//  public List<Note> evernoteNotesGet(SSServPar parA) throws SSErr {
//
//    try{
//
//      SSEvernoteNotesGetPar   par        = new SSEvernoteNotesGetPar(parA);
//      List<Note>              notes      = new ArrayList<>();
//      NotesMetadataResultSpec resultSpec = new NotesMetadataResultSpec();
//      NoteFilter              noteFilter = new NoteFilter();
//      NotesMetadataList       noteList;
////    NoteCollectionCounts    noteCount;
//
//      resultSpec.setIncludeAttributes(true);
//      resultSpec.setIncludeCreated(true);
//      resultSpec.setIncludeDeleted(true);
//      resultSpec.setIncludeNotebookGuid(true);
//      resultSpec.setIncludeTitle(true);
//      resultSpec.setIncludeUpdated(true);
//
//      noteFilter.setNotebookGuid(par.notebookGuid);
//
////      noteCount = par.noteStore.findNoteCounts    (noteFilter, false);
//      noteList  = par.noteStore.findNotesMetadata (noteFilter, 0, 100, resultSpec);
//
//      for (NoteMetadata note : noteList.getNotes()) {
//        notes.add(par.noteStore.getNote(note.getGuid(), true, true, false, false));
//      }
//
//      return notes;
//    }catch(Exception error){
//
//      if(
//        error instanceof EDAMSystemException &&
//        ((EDAMSystemException)error).getErrorCode().compareTo(EDAMErrorCode.RATE_LIMIT_REACHED) == 0){
//
//        SSServErrReg.reset();
//
//        SSLogU.info("evernoteNotesGet goes to sleep for " + ((EDAMSystemException)error).getRateLimitDuration() + " seconds for RATE EXCEPTION");
//
//        Thread.sleep(((EDAMSystemException)error).getRateLimitDuration() * SSDateU.secondInMilliseconds  + SSDateU.secondInMilliseconds * 10) ;
//
//        return evernoteNotesGet (parA);
//      }
//
//      SSServErrReg.regErrThrow(error);
//      return null;
//    }
//  }
//
//  @Override
//  public List<Note> evernoteNotesLinkedGet(final SSServPar parA) throws SSErr{
//
//    try{
//      final SSEvernoteNotesLinkedGetPar par       = new SSEvernoteNotesLinkedGetPar(parA);
//      final SyncChunk                   synChunk  = par.noteStore.getLinkedNotebookSyncChunk(par.linkedNotebook, 0, 256, true);
//
//      return synChunk.getNotes();
//
//    }catch (Exception error){
//      SSServErrReg.regErrThrow(error);
//      return null;
//    }
//  }
// @Override
//  public String evernoteUsersAuthTokenGet(final SSServPar parA) throws SSErr{
//
//    try{
//      final SSEvernoteUsersAuthTokenGetPar par = new SSEvernoteUsersAuthTokenGetPar(parA);
//
//      return sqlFct.getAuthToken(par.user);
//
//    }catch(Exception error){
//      SSServErrReg.regErrThrow(error);
//      return null;
//    }
//}