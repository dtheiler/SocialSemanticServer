//@Override
//  public boolean dataImportUserResourceTagFromWikipedia(final SSServPar parA) throws SSErr {
//
//    final SSAuthServerI                               authServ      = (SSAuthServerI) SSServReg.getServ(SSAuthServerI.class);
//    final SSDataImportUserResourceTagFromWikipediaPar par           = new SSDataImportUserResourceTagFromWikipediaPar(parA);
//    int                                               counter       = 1;
//    int                                               tagCounter    = 0;
//    BufferedReader                                    lineReader    = null;
//    List<String>                                      tagList;
//    FileInputStream                                   dataImportFileIn;
//    String                                            line;
//    List<String>                                      lineSplit;
//    String                                            userLabel;
//    SSUri                                             resource;
//    SSUri                                             user;
//    String                                            tags;
//    String                                            categories;
//    Long                                              timestamp;
//
//    try{
//      ((SSTagServerI) SSServReg.getServ(SSTagServerI.class)).tagsRemove(
//        new SSTagsRemovePar(
//          parA.user,
//          null,
//          null,
//          null,
//          SSSpaceE.sharedSpace,
//          null, //circle
//          false,
//          par.shouldCommit));
//
//      dataImportFileIn = SSFileU.openFileForRead   (SSFileU.dirWorkingDataCsv() + ((SSDataImportConf)conf).fileName);
//      lineReader       = new BufferedReader        (new InputStreamReader(dataImportFileIn));
//      line             = lineReader.readLine();
//
//      while(line != null){
//
//        line       = SSStrU.removeDoubleQuotes(line); //        line       = SSStrU.replaceAll(line, SSStrU.dot,     SSStrU.empty);
//        line       = SSStrU.replaceAll        (line, SSStrU.percent, SSStrU.empty);
//        lineSplit  = SSStrU.split             (line, SSStrU.semiColon);
//
//        if(
//          lineSplit == null ||
//          lineSplit.size() < 5){
//
//          line = lineReader.readLine();
//          continue;
//        }
//
//        categories = lineSplit.get(4);
//
////        if(!categories.contains("health")){
////          line = lineReader.readLine();
////          continue;
////        }
//
//        try{
//          resource  = SSUri.get(lineSplit.get(1));
//        }catch(Exception error){
//          line = lineReader.readLine();
//          continue;
//        }
//
//        userLabel   = lineSplit.get   (0);
//        timestamp   = Long.parseLong  (lineSplit.get(2)) * 1000;
//        tags        = lineSplit.get   (3);
//
//        user=
//          authServ.authRegisterUser(
//            new SSAuthRegisterUserPar(
//              userLabel + SSStrU.at + SSConf.systemEmailPostFix, //email
//              "1234", //password
//              SSLabel.get(userLabel),
//              false, //updatePassword,
//              false, //isSystemUser,
//              false, //withUserRestriction,
//              false)); //shouldCommit
//
//        tagList     = SSStrU.splitDistinctWithoutEmptyAndNull(tags, SSStrU.comma);
//        tagCounter += tagList.size();
//
//        ((SSTagServerI) SSServReg.getServ(SSTagServerI.class)).tagsAdd(
//          new SSTagsAddPar(
//            user,
//            SSTagLabel.get(tagList), //labels
//            SSUri.asListNotNull(resource), //entities
//            SSSpaceE.sharedSpace, //space
//            null, //circles
//            timestamp, //creationTime
//            true, //withUserRestriction
//            par.shouldCommit)); //shouldCommit
//
//        SSLogU.info("line " + counter++ + " " + tagCounter + " time : " + new Date().getTime() + " user: " + user.toString() + " tags: " + tags);
//
//        line = lineReader.readLine();
//      }
//
//      return true;
//
//    }catch(SSErr error){

//      if(error.code == SSErrE.sqlDeadLock){
//
//        try{
//          dbSQL.rollBack(par, par.shouldCommit);
//          SSServErrReg.regErrThrow(error);
//          return null;
//        }catch(Exception error2){
//          SSServErrReg.regErrThrow(error2);
//          return null;
//        }
//      }
//
//      SSServErrReg.regErrThrow(error);
//      return null;
//    }catch(Exception error){
//      SSServErrReg.regErrThrow(error);
//      return null;
//    }
//    }finally{
//
//      if(lineReader != null){
//        lineReader.close();
//      }
//    }
//  }