/**
* Code contributed to the Learning Layers project
* http://www.learning-layers.eu
* Development is partly funded by the FP7 Programme of the European Commission under
* Grant Agreement FP7-ICT-318209.
* Copyright (c) 2014, Graz University of Technology - KTI (Knowledge Technologies Institute).
* For a list of contributors see the AUTHORS file at the top-level directory of this distribution.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package at.kc.tugraz.ss.service.tag.impl.fct.graph;

import at.kc.tugraz.ss.serv.db.api.SSDBGraphFct;
import at.kc.tugraz.ss.serv.serv.api.SSServImplWithDBA;

public class SSTagGraphFct extends SSDBGraphFct{
  
  public SSTagGraphFct(final SSServImplWithDBA serv) throws Exception{
    super(serv.dbGraph);
  }
  
//  public List<SSTag> getTagAssignments(
//    SSUri       resource,
//    SSTagString tagString,
//    SSUri       user,
//    SSSpaceEnum space) throws Exception {
//
//    List<SSTag>     result     = new ArrayList<SSTag>(); 
//    List<String>    selectPars = new ArrayList<>();
//    String          queryString, tag, tagSet, label;
//    Boolean         useGivenResource = true;
//    
//    selectPars.add(bindTag);
//    selectPars.add(bindTagSet);
//    
//    if(SSSpaceEnum.isShared (space)){
//      selectPars.add(bindUser);
//    }
//    
//    if(SSObjU.isNull(resource)) {
//      selectPars.add(bindResource);
//      useGivenResource = false;
//    }
//    
//    if(SSObjU.isNull(tagString)){
//      selectPars.add(bindLabel);
//    }
//    
//    if(SSSpaceEnum.isShared (space)){
//      queryString = selectWithParFromAndWhere(selectPars);
//    }else{
//      queryString = selectWithParFromAndWhere(user, selectPars);
//    }
//    
//    queryString +=
//      and(bindTagSet, predType(),      objTagSet())  +
//      and(bindTag,    predBelongsTo(), bindTagSet)   +
//      and(bindTag,    predType(),      objTag());
//    
//    if(SSObjU.isNull(tagString)){
//      queryString += and(bindTag, predHasLabel(), bindLabel);
//    }else{
//      queryString += and(bindTag, predHasLabel(), objHasLabel(tagString.toString()));
//    }
//
//    if(SSObjU.isNull(resource)) {
//      queryString += and(bindResource, predResourceBelongsTo(), bindTagSet);
//    } else {
//      queryString += and(resource,     predResourceBelongsTo(), bindTagSet);
//    }
//    
//    if (SSSpaceEnum.isShared(space)) {
//      queryString += 
//        and(bindUser, predBelongsTo(), bindTagSet) + 
//        and(bindUser, predType(),      objUser());
//    }else{
//      queryString +=
//        and(user,   predBelongsTo(), bindTagSet) +
//        and(user,   predType(),      objUser());
//    }
//
//    queryString += whereEnd() + limit(1000);
//
//    for(SSQueryResultItem item : db.query(queryString)) {
//
//      if(!useGivenResource){
//        resource = SSUri.get(binding(item, bindResource));
//      }
//
//      if(SSSpaceEnum.isShared(space)){
//        user = SSUri.get(binding(item, bindUser));
//      }
//
//      if(SSObjU.isNull(tagString)) {
//        label = SSStrU.removeDoubleQuotes(binding(item, bindLabel));
//      }else{
//        label = SSStrU.toStr(tagString);
//    }
//
//      tag     = binding(item, bindTag);
//      
//      result.add(SSTag.get(
//        SSUri.get(tag), 
//        resource, 
//        user, 
//        space, 
//        SSTagString.get(label)));
//    }
//    
//    return result;
//  }
//
//  public List<SSTag> getTagAssignmentsDistinctResource(
//    SSUri        user,
//    SSUri        resource, 
//    SSTagString  tagString, 
//    SSSpaceEnum  space,
//    int          maxResults) throws Exception {
//
//    List<SSTag>  result                = new ArrayList<SSTag>();
//    List<String> selectPars            = new ArrayList<>();
//    boolean      useResourceFromResult = false;
//    String       queryString;
//    
//
//    if(SSObjU.isNull(resource)) {
//      selectPars.add(bindResource);
//      
//      useResourceFromResult = true;
//    }
//
//    //TODO distinct select here?!?
//    if (SSSpaceEnum.isShared(space)) {
//      queryString = selectWithParFromAndWhere(selectPars);
//    }else{
//      queryString = selectWithParFromAndWhere(user, selectPars);
//    }
//
//    queryString += 
//      and(bindTagSet, predType(),      objTagSet()) +
//      and(bindTag,    predBelongsTo(), bindTagSet)  + 
//      and(bindTag,    predType(),      objTag());
//
//    if(SSObjU.isNull(tagString)){
//      queryString += and(bindTag, predHasLabel(), bindLabel);
//    }else{
//      queryString += and(bindTag, predHasLabel(), objHasLabel(tagString.toString()));
//    }
//
//    if(SSObjU.isNull(resource)){
//      queryString += and(bindResource,  predResourceBelongsTo(), bindTagSet);
//    }else{
//      queryString += and(resource,      predResourceBelongsTo(), bindTagSet);
//    }
//
//    if(SSSpaceEnum.isShared(space)) {
//      queryString += 
//        and(bindUser, predBelongsTo(), bindTagSet) + 
//        and(bindUser, predType(),      objUser());
//    } else {
//      queryString += 
//       and(user, predBelongsTo(), bindTagSet) + 
//       and(user, predType(),      objUser());
//    }
//
//    queryString += whereEnd() + limit(maxResults);
//
//    for(SSQueryResultItem item : db.query(queryString)){
//
//      if(useResourceFromResult) {
//        resource = SSUri.get(binding(item, bindResource));
//      }
//
//      result.add(SSTag.get(null, resource, null, space, null));
//    }
//
//    return result;
//  }
//
//  public boolean addTag(
//    SSUri       resource,
//    SSTagString tagString,
//    SSUri       user,
//    SSSpaceEnum space) throws Exception{
//    
//    SSLiteral timestamp = objTime();
//    SSUri     tagSet    = createTagSetUri (timestamp);
//    SSUri     tag       = createTagUri    (timestamp);
//
//    if(SSSpaceEnum.isShared(space)){
//     
//      db.add(tagSet,    predType(),              objTagSet(), namedGraphUri);
//      db.add(tagSet,    predTime(),              timestamp, namedGraphUri);
//      db.add(tag,       predType(),              objTag(), namedGraphUri);
//      db.add(tag,       predHasLabel(),          objHasLabel(tagString.toString()), namedGraphUri);
//      db.add(user,      predBelongsTo(),         tagSet, namedGraphUri);
//      db.add(resource,  predResourceBelongsTo(), tagSet, namedGraphUri);
//      db.add(tag,       predBelongsTo(),         tagSet, namedGraphUri);
//      
//    }else{
//      db.add(tagSet,    predType(),              objTagSet(),                         user);
//      db.add(tagSet,    predTime(),              timestamp,                           user);
//      db.add(tag,       predType(),              objTag(),                            user);
//      db.add(tag,       predHasLabel(),          objHasLabel(tagString.toString()),   user);
//      db.add(user,      predBelongsTo(),         tagSet,                              user);
//      db.add(resource,  predResourceBelongsTo(), tagSet,                              user);
//      db.add(tag,       predBelongsTo(),         tagSet,                              user);
//    }
//     
//    return true;
//  }
//
//  public boolean deleteTag(
//    List<SSTag>   tagsets, 
//    SSUri         user,
//    SSUri         resource,
//    SSSpaceEnum   space) throws Exception{
//    
//    for (SSTag tagAssignment : tagsets) {
//
//      if(SSSpaceEnum.isShared(space)) {
//        db.remove (tagAssignment.tagSet, null, null, namedGraphUri);
//        db.remove (null,                 null, tagAssignment.tagSet, namedGraphUri);
//      }else{
//        db.remove (tagAssignment.tagSet, null, null,                    user);
//        db.remove (null,                 null, tagAssignment.tagSet,    user);
//      }
//    }
//
//    return true;
//  }
//  
//  private SSUri createTagSetUri(SSLiteral timestamp) throws Exception{
//    return SSUri.get(objTagSet().toString() + timestamp);
//  }
//  
//  private SSUri createTagUri(SSLiteral timestamp) throws Exception{
//    return SSUri.get(objTag().toString() + timestamp);
//  }
}

//  public String[] getWeightedTags(String user, String page)  {
//    Random rand = new Random();
//    // Falsche ?bergabe
//    String[] tags = this.getResourceTags(user, page, 3, false);
//    for (int i = 0; i < tags.length; i++) {
//      tags[i] = tags[i] + " | " + rand.nextInt(10);
//    }
//    return tags;
//  }

//  public String[] getResourceTags(String user, String page, int mode, boolean onlyuser)  {
//    List<String> outList = new ArrayList<>();
//    String queryString;
//    String from = Vocabulary.getInstance().getGraphUri(VocNamespace.COMMON).toString(); //SemanticVocabulary.MATURENS + "common";
//
//    if (onlyuser) {
//      queryString = "SELECT DISTINCT ?tag FROM <" + from + "> WHERE{ " + "?set <"
//              //              + SemanticVocabulary.RDFtype 
//              + getTypeUri()
//              + "> <"
//              //              + SemanticVocabulary.typeTAGSET 
//              + getTagSetUri()
//              + ">." + " ?tag <"
//              //              + SemanticVocabulary.belongsTo 
//              + getBelongsToUri()
//              + "> ?set." + "?tag <"
//              //              + SemanticVocabulary.RDFtype 
//              + getTypeUri()
//              + "> <"
//              //              + SemanticVocabulary.typeTAG 
//              + getTagUri()
//              + ">." + "<"
//              + strU.removeSlashFromEnd(page)
//              + "> <"
//              //              + SemanticVocabulary.belongsTo 
//              + getBelongsToUri()
//              + "> ?set." + "<"
//              + strU.removeSlashFromEnd(page)
//              + "> <"
//              //              + SemanticVocabulary.RDFtype 
//              + getTypeUri()
//              + "> <"
//              //              + SemanticVocabulary.typeRESOURCE 
//              + getResourceUri()
//              + ">." + "<"
//              + new SSUri(user, true)
//              + "> <"
//              //              + SemanticVocabulary.belongsTo 
//              + getBelongsToUri()
//              + "> ?set." + "}";
//    } else {
//      queryString = "SELECT DISTINCT ?tag FROM <" + from + "> WHERE{ " + "?set <"
//              //              + SemanticVocabulary.RDFtype 
//              + getTypeUri()
//              + "> <"
//              //              + SemanticVocabulary.typeTAGSET 
//              + getTagSetUri()
//              + ">." + " ?tag <"
//              //              + SemanticVocabulary.belongsTo 
//              + getBelongsToUri()
//              + "> ?set." + "?tag <"
//              //              + SemanticVocabulary.RDFtype 
//              + getTypeUri()
//              + "> <"
//              //              + SemanticVocabulary.typeTAG 
//              + getTagUri()
//              + ">." + "<"
//              + strU.removeSlashFromEnd(page)
//              + "> <"
//              //              + SemanticVocabulary.belongsTo 
//              + getBelongsToUri()
//              + "> ?set." + "<"
//              + strU.removeSlashFromEnd(page)
//              + "> <"
//              //              + SemanticVocabulary.RDFtype 
//              + getTypeUri()
//              + "> <"
//              //              + SemanticVocabulary.typeRESOURCE 
//              + getResourceUri()
//              + ">." + "}";
//    }
//
//    SSQueryResult result = null;
//    try {
//      result = serv.prepareSparqlQuery(queryString);
//    } catch (Exception e) {
//      log.error(e.getMessage(), e);
//    }
//    for (SSQueryResultItem item : result) {
//      outList.add(item.getBinding(bindTag));
//    }
//
//    return SSUtils.getStringArrayFromList(outList, true);
//  }

//  public String[] getSortedUserTags(String user, int number) {
//
//    String from = "<" + Vocabulary.getInstance().getGraphUri(VocNamespace.COMMON) + ">"; //SemanticVocabulary.MATURENS + "common>";
//    // alt: a.add(namedGraphURI);
//    try {
////      SSUri context = new SSUri(SemanticVocabulary.MATURENS + user);
//      SSUri context = Vocabulary.getInstance().getGraphUri(user);
//     
//      if (serv.contextExists(context)) {
//        from += " FROM " + "<" + Vocabulary.getInstance().getGraphUri(user) + ">"; //SemanticVocabulary.MATURENS + user 
//      }
//    } catch (Exception e) {
//      log.error(e.getMessage(), e);
//    }
//
//    String queryString = "PREFIX matns: <http://tug.mature-ip.eu/> " + "SELECT ?set ?t ?tag FROM " + from + " WHERE{" + " ?set <"
//            //            + SemanticVocabulary.RDFtype 
//            + getTypeUri()
//            + "> <"
//            //            + SemanticVocabulary.typeTAGSET 
//            + getTagSetUri()
//            + ">." + " ?set matns:timestamp ?t." + " ?tag <"
//            //            + SemanticVocabulary.belongsTo 
//            + getBelongsToUri()
//            + "> ?set." + " ?tag <"
//            //            + SemanticVocabulary.RDFtype 
//            + getTypeUri()
//            + "> <"
//            //            + SemanticVocabulary.typeTAG 
//            + getTagUri()
//            + ">." + "}ORDER BY DESC (?t) LIMIT " + number;
//
//    SSQueryResult result = null;
//    try {
//      result = serv.prepareSparqlQuery(queryString);
//    } catch (Exception e) {
//      log.error(e.getMessage(), e);
//    }
//    String[] outString = new String[result.size()];
//    int row = 0;
//    for (SSQueryResultItem item : result) {
//      outString[row] = item.getBinding(bindTag); // add tag
//      row++;
//    }
//
//    return outString;
//  }
